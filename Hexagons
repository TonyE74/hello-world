import math
import numpy as np
import matplotlib.pyplot as plt
"""
import matplotlib
matplotlib.use('TkAgg',force=True)
from matplotlib import pyplot as plt
print("Switched to:",matplotlib.get_backend())
"""

# Function to generate the vertices of a single hexagon
def hexagon(center, size):
    """Generate the vertices of a hexagon with a given center and size."""
    angle_offset = np.pi / 6  # 30 degrees
    # print('Hexagon: ', center, size)
    return [
        (center[0] + size * np.cos(angle_offset + i * 2 * np.pi / 6),
         center[1] + size * np.sin(angle_offset + i * 2 * np.pi / 6))
        for i in range(6)
    ]

# Function to plot a hexagonal grid of a certain size
def plot_hexagonal_grid(size):
    """Generate and plot a hexagonal grid with the specified rows, columns, and hexagon size."""
    # Calculate the number of hexagons that will be created
    hex_count = 3 * size * (size -1) + 1
    
    # Calculate the width and height of a single hexagon
    hex_width = np.sqrt(3) 
    hex_height = 2 * size # np.sqrt(3) * size

    # Create a list of hexagon centers
    hex_centers = []

    start_new_row = 1
    max_hex = 0

    # Create a list of rows with the min and max hex numbers
    row_list = []
    hex_rows = 2 * size - 1
    for row in range(hex_rows):
        row += 1

        if row <= size:
            min_hex = max_hex + 1
            max_hex = min_hex + size + row - 2
            print('row: ', row, 'min_hex: ', min_hex, ', max_hex: ', max_hex)
            row_offset =  - ( row - 1 ) * hex_width / 2
            col_offset = (1 - row) * 1.5
        else:
            min_hex = max_hex + 1
            max_hex = min_hex + (hex_rows - row) + size - 1
            print('row: ', row, 'min_hex: ', min_hex, ', max_hex: ', max_hex)
            row_offset = - (hex_rows - row) * hex_width / 2 # Need to work out the number of the row from the last row
            col_offset = (1 - row) * 1.5

        # Cycle through each min_hex and max_hex range
        for h in range(min_hex, max_hex + 1):
            h_col = h - min_hex + 1
            x_offset = row_offset + (h_col - 1 ) * hex_width
            y_offset = col_offset   # Vertical offset for staggering
            # Add to list
            hex_centers.append((h, row, h_col, x_offset, y_offset))

    print(*hex_centers,sep='\n')

    # Plot each hexagon
    plt.figure(figsize=(10, 10))
    ax = plt.gca()

    for center in hex_centers:
        hex_vertices = hexagon((center[3],center[4]), 1)
        hex_x, hex_y = zip(*hex_vertices)
        ax.fill(hex_x, hex_y, edgecolor='black', facecolor='lightblue', lw=1)
        # Display the number 20 in the center of the rectangle
        plt.text(center[3], center[4], center[0], fontsize=20, ha='center', va='center', color='black')


    # Adjust axes to fit the grid properly
    ax.set_aspect('equal')
    ax.set_axis_off()  # Turn off axis
    plt.show()

# Parameters
# rows = 1  # Number of rows in the grid
# cols = 19  # Number of columns in the grid
size = 3   # Size of the hexagons (radius of each hexagon)

# Plot the hexagonal grid
plot_hexagonal_grid(size)



"""
    for row in range(rows):
        for col in range(cols):
            
            x_offset = col * hex_width # * 3 / 4  # Horizontal spacing
            y_offset = row * hex_height # + (col % 2) * (hex_height / 2)  # Vertical offset for staggering
            # print(col, x_offset, y_offset)
            hex_centers.append((x_offset, y_offset))
"""

"""
row == 1:
            print('row = ', row)
            min_hex = max_hex + 1
            max_hex = min_hex + size + row - 2
            print('min_hex: ', min_hex, ', max_hex: ', max_hex)
            row_offset = - ( row - 1 ) * hex_width / 2
            col_offset = (1 - row) * 1.5
"""